
userarr=("$@")
sstools_modifier=$1
#echo ${sstools_modifier}
#execute global config file to get most up to date configurations
#Not the most beautiful way to set an environmental variable but it works

CURDIR=`/bin/pwd`
BASEDIR=$(dirname $0)
ABSPATH=$(readlink -f $0)
ABSDIR=$(dirname $ABSPATH)

SSTOOLS_ROOT_ENV="${ABSDIR%/bin}"
export SSTOOLS_ROOT_ENV=${SSTOOLS_ROOT_ENV}
#export paths in main-conf
source ${SSTOOLS_ROOT_ENV}/config/config-main.conf
#export paths in user-conf
source ${SSTOOLS_ROOT_ENV}/config/config-user.conf

#extra functions to load
source ${SSTOOLS_FUNCTIONS_LIBRARY}/sstools-pipe-helpers.sh
source ${SSTOOLS_FUNCTIONS_LIBRARY}/sstools-mapfiles-helpers.sh

#echo "$( IFS=$' '; echo "${userarr[*]}" )" 
#IFS='¬' read -r -a ARGS_TO_FUNC <<< $(${SSTOOLS_ROOT_ENV}/modules/bash-modules/sstools-init-modules/sstools-raw-init.sh "$@") 
#${SSTOOLS_ROOT_ENV}/modules/bash-modules/sstools-init-modules/sstools-raw-init.sh "$@" | IFS='¬' read -r -a ARGS_TO_FUNC
IFS='¬' read -a ARGS_TO_FUNC < <(${SSTOOLS_ROOT_ENV}/modules/bash-modules/sstools-init-modules/sstools-raw-init.sh "$@")
#echo "${ARGS_TO_FUNC[@]}"
RESULT=$?
#If the above (most recent command) was successful, then 
if [ $RESULT -eq 0 ]; then
  #echo "parsing complete" 1>&2
  #run script based on modifier
  if [ "$ARGS_TO_FUNC" == "" ]; then
    echo "parsing complete script no output" 1>&2
    exit 1
  else
    if [ "$sstools_modifier" == "tab-sep" ]; then
      #echo "${ARGS_TO_FUNC[@]}"
      CHECK_NUM_FIELDS_WRAPPER="${SSTOOLS_ROOT_ENV}/modules/bash-modules/check-number-of-fields-wrapper.sh"
      sh ${CHECK_NUM_FIELDS_WRAPPER} "${ARGS_TO_FUNC[@]}"
    elif [ "$sstools_modifier" == "add-index" ]; then
     #echo "${ARGS_TO_FUNC[@]}"
      readoption "${ARGS_TO_FUNC[0]}" | awk '{ print FNR-1 "\t" $0 }'
    elif [ "$sstools_modifier" == "sort-index" ]; then
      readoption "${ARGS_TO_FUNC[0]}" | LC_ALL=C sort -k 1
    elif [ "$sstools_modifier" == "new-header" ]; then
      #echo "${ARGS_TO_FUNC[@]}"
      AWK_CHANGE_HEADER="${SSTOOLS_ROOT_ENV}/modules/awk-modules/change-header-to-passed-argument.awk"
      file="${ARGS_TO_FUNC[0]}"
      newHeader="${ARGS_TO_FUNC[1]}"
      #echo "${file}"
      #echo "${newHeader}"
      readoption "${ARGS_TO_FUNC[0]}" | eval gawk -f ${AWK_CHANGE_HEADER} -v newHeader="${newHeader}"
    elif [ "$sstools_modifier" == "new-sep" ]; then
      AWK_CHANGE_SEPARATOR="${SSTOOLS_ROOT_ENV}/modules/awk-modules/change-separator.awk"
      cmd1="awk -f ${AWK_CHANGE_SEPARATOR} -vFS='\t${ARGS_TO_FUNC[3]}' -vOFS='${ARGS_TO_FUNC[1]}' "
      cmd2="awk -f ${AWK_CHANGE_SEPARATOR} -vFS='[ ]${ARGS_TO_FUNC[3]}' -vOFS='${ARGS_TO_FUNC[2]}' "
      readoption "${ARGS_TO_FUNC[0]}" | eval "${cmd1}" | eval "${cmd2}"
    else
      echo "no modifier" 1>&2
    fi
  fi
else
  echo "parsing failed" 1>&2
  exit 1
fi

