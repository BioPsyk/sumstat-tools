
userarr=("$@")
sstools_modifier=$1
#echo ${sstools_modifier}
#execute global config file to get most up to date configurations
#Not the most beautiful way to set an environmental variable but it works

CURDIR=`/bin/pwd`
BASEDIR=$(dirname $0)
ABSPATH=$(readlink -f $0)
ABSDIR=$(dirname $ABSPATH)

SSTOOLS_ROOT_ENV="${ABSDIR%/bin}"
export SSTOOLS_ROOT_ENV=${SSTOOLS_ROOT_ENV}
#export paths in main-conf
source ${SSTOOLS_ROOT_ENV}/config/config-main.conf
#export paths in user-conf
source ${SSTOOLS_ROOT_ENV}/config/config-user.conf
#echo "${SSTOOLS_ROOT_ENV}"

source ${SSTOOLS_FUNCTIONS_LIBRARY}/sstools-pipe-helpers.sh
source ${SSTOOLS_FUNCTIONS_LIBRARY}/sstools-mapfiles-helpers.sh

#${SSTOOLS_ROOT_ENV}/modules/bash-modules/sstools-init-modules/sstools-gb-init.sh "$( IFS=$' '; echo "${userarr[*]}" )"
VAR_RETURN=$(${SSTOOLS_ROOT_ENV}/modules/bash-modules/sstools-init-modules/sstools-utils-init.sh "$( IFS=$' '; echo "${userarr[*]}" )")
RESULT=$?
#If the above (most recent command) was successful, then 
if [ $RESULT -eq 0 ]; then
  #echo "parsing complete" 1>&2
  #run script based on modifier
  if [ "$VAR_RETURN" == "" ]; then
   # echo "parsing complete script no output" 1>&2
    exit 1
  else
    if [ "$sstools_modifier" == "ad-hoc" ]; then
      eval $VAR_RETURN
    elif [ "$sstools_modifier" == "ad-hoc-do" ]; then
      VAR_RETURN=(${VAR_RETURN})
      infile="${VAR_RETURN[0]}"
      SSTOOLS_ADHOCDO_FUNCTIONS_ARRANGE="${VAR_RETURN[1]}"
      specialfunction="${VAR_RETURN[2]}"
      newcols="${VAR_RETURN[3]}"
      cmd="gawk -f ${SSTOOLS_ADHOCDO_FUNCTIONS_ARRANGE} -v mapcols='${specialfunction}' -v newcols='${newcols}'"
      readoption "${infile}" | eval "${cmd}"

    elif [ "$sstools_modifier" == "assemble" ]; then
      #eval $VAR_RETURN
      VAR_RETURN=(${VAR_RETURN})
      infile="${VAR_RETURN[0]}"
      successmapping="${VAR_RETURN[1]}"
      
      echo ${infile}
      echo ${successmapping}
      #cmd="awk -v newheader='$((head -n1 ${successmapping} & gzip -dc ${infile} | head -n1) | awk -vRS='\n' -vORS='' 'NR==1{print $0"\t"}; NR==2{print $0"\n"}')' 'BEGIN{print newheader} NR==FNR{a[\$1]=\$0;next} FNR in a{print \$0, a[FNR]}' <(tail -n+2 ${successmapping}) <(gzip -dc ${infile} | tail -n+2)"
     # newheader="hej"
     # cmd="awk 'NR==FNR{a[\$1]=\$0;next} FNR in a{print \$0, a[FNR]}' <(tail -n+2 ${successmapping}) <(gzip -dc ${infile} | tail -n+2)"
     # readoption "${infile}" | eval "${cmd}"

    elif [ "$sstools_modifier" == "assemble-wrap" ]; then
      VAR_RETURN=(${VAR_RETURN})
      #echo ${VAR_RETURN[@]}
      indir="${VAR_RETURN[0]}"
      mapfile="${VAR_RETURN[1]}"
      locdir="${VAR_RETURN[2]}"
      inx="${VAR_RETURN[3]}"
      outdir="${VAR_RETURN[4]}"
      fname=$(eval "awk 'FNR==(${inx}+1){print \$1}' ${mapfile} ")
      infile=$(wrap_assemble_prepare "${VAR_RETURN[@]}")
      mapped="${locdir}/remaining_${fname%.gz}"
      #echo $infile
      #echo $mapped
      #echo ${outdir}/${fname}
      sstools-utils assemble -f $infile -g $mapped | gzip -c > ${outdir}/${fname}
    elif [ "$sstools_modifier" == "interactive" ]; then
      #type interactiveWalkerMultiple
      #echo ""
      #echo ${SSTOOLS_FUNCTIONS_LIBRARY}
      #echo ${VAR_RETURN} ${SSTOOLS_ROOT_ENV}
      interactiveWalkerMultiple ${VAR_RETURN} ${SSTOOLS_ROOT_ENV}
    elif [ "$sstools_modifier" == "nrow" ]; then
      #echo $VAR_RETURN
      eval $VAR_RETURN
    else
      echo "no modifier" 1>&2
    fi
  fi
else
  echo "parsing failed" 1>&2
  exit 1
fi

